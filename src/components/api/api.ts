/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface ChangePassword
 */
export interface ChangePassword {
  /**
   *
   * @type {string}
   * @memberof ChangePassword
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof ChangePassword
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof ChangePassword
   */
  new_password: string;
  /**
   *
   * @type {string}
   * @memberof ChangePassword
   */
  confirm_password: string;
}
/**
 *
 * @export
 * @interface ChatGPTRequest
 */
export interface ChatGPTRequest {
  /**
   *
   * @type {string}
   * @memberof ChatGPTRequest
   */
  question: string;
}
/**
 *
 * @export
 * @interface ChatGPTResponse
 */
export interface ChatGPTResponse {
  /**
   *
   * @type {string}
   * @memberof ChatGPTResponse
   */
  response: string;
}
/**
 *
 * @export
 * @interface Company
 */
export interface Company {
  /**
   *
   * @type {string}
   * @memberof Company
   */
  email: string;
  /**
   *
   * @type {number}
   * @memberof Company
   */
  id: number;
}
/**
 *
 * @export
 * @interface CompanyCreate
 */
export interface CompanyCreate {
  /**
   *
   * @type {string}
   * @memberof CompanyCreate
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CompanyCreate
   */
  hashed_password: string;
  /**
   *
   * @type {string}
   * @memberof CompanyCreate
   */
  name: string;
}
/**
 *
 * @export
 * @interface EmployeeBase
 */
export interface EmployeeBase {
  /**
   *
   * @type {number}
   * @memberof EmployeeBase
   */
  company_id: number;
  /**
   *
   * @type {string}
   * @memberof EmployeeBase
   */
  user_email: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {}
/**
 *
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {string}
   * @memberof Task
   */
  state: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  priority: string;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  owner_id: number;
}
/**
 *
 * @export
 * @interface TaskCreate
 */
export interface TaskCreate {
  /**
   *
   * @type {string}
   * @memberof TaskCreate
   */
  state: string;
  /**
   *
   * @type {string}
   * @memberof TaskCreate
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof TaskCreate
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof TaskCreate
   */
  priority: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  email: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number;
}
/**
 *
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  hashed_password: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  name: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<LocationInner>}
   * @memberof ValidationError
   */
  loc: Array<LocationInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Ask Gpt
     * @param {ChatGPTRequest} chatGPTRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    askGptAskGptPost: async (
      chatGPTRequest: ChatGPTRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'chatGPTRequest' is not null or undefined
      assertParamExists("askGptAskGptPost", "chatGPTRequest", chatGPTRequest);
      const localVarPath = `/ask_gpt`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        chatGPTRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create Company
     * @param {CompanyCreate} companyCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCompanyApiCompaniesPost: async (
      companyCreate: CompanyCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'companyCreate' is not null or undefined
      assertParamExists(
        "createCompanyApiCompaniesPost",
        "companyCreate",
        companyCreate,
      );
      const localVarPath = `/api/companies`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        companyCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create Employee
     * @param {EmployeeBase} employeeBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeApiEmployeesPost: async (
      employeeBase: EmployeeBase,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'employeeBase' is not null or undefined
      assertParamExists(
        "createEmployeeApiEmployeesPost",
        "employeeBase",
        employeeBase,
      );
      const localVarPath = `/api/employees`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        employeeBase,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create Task
     * @param {TaskCreate} taskCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaskApiTasksPost: async (
      taskCreate: TaskCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskCreate' is not null or undefined
      assertParamExists("createTaskApiTasksPost", "taskCreate", taskCreate);
      const localVarPath = `/api/tasks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        taskCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserApiUsersPost: async (
      userCreate: UserCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userCreate' is not null or undefined
      assertParamExists("createUserApiUsersPost", "userCreate", userCreate);
      const localVarPath = `/api/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Task
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskApiTasksTaskIdDelete: async (
      taskId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      assertParamExists("deleteTaskApiTasksTaskIdDelete", "taskId", taskId);
      const localVarPath = `/api/tasks/{task_id}`.replace(
        `{${"task_id"}}`,
        encodeURIComponent(String(taskId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Generate Token
     * @param {any} type
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateTokenApiTokenPost: async (
      type: any,
      username: string,
      password: string,
      grantType?: string,
      scope?: string,
      clientId?: string,
      clientSecret?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'type' is not null or undefined
      assertParamExists("generateTokenApiTokenPost", "type", type);
      // verify required parameter 'username' is not null or undefined
      assertParamExists("generateTokenApiTokenPost", "username", username);
      // verify required parameter 'password' is not null or undefined
      assertParamExists("generateTokenApiTokenPost", "password", password);
      const localVarPath = `/api/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (grantType !== undefined) {
        localVarFormParams.set("grant_type", grantType as any);
      }

      if (username !== undefined) {
        localVarFormParams.set("username", username as any);
      }

      if (password !== undefined) {
        localVarFormParams.set("password", password as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set("scope", scope as any);
      }

      if (clientId !== undefined) {
        localVarFormParams.set("client_id", clientId as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set("client_secret", clientSecret as any);
      }

      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get All Companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCompaniesApiCompaniesNamesGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/companies/names`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanyApiCompaniesMeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/companies/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Employees Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeesTasksApiEmployeesTasksGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/employees/tasks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Task
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskApiTasksTaskIdGet: async (
      taskId: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      assertParamExists("getTaskApiTasksTaskIdGet", "taskId", taskId);
      const localVarPath = `/api/tasks/{task_id}`.replace(
        `{${"task_id"}}`,
        encodeURIComponent(String(taskId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTasksApiTasksGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/tasks`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserApiUsersMeGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Password
     * @param {number} userId
     * @param {ChangePassword} changePassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordApiUsersUserIdPut: async (
      userId: number,
      changePassword: ChangePassword,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("updatePasswordApiUsersUserIdPut", "userId", userId);
      // verify required parameter 'changePassword' is not null or undefined
      assertParamExists(
        "updatePasswordApiUsersUserIdPut",
        "changePassword",
        changePassword,
      );
      const localVarPath = `/api/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        changePassword,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Task
     * @param {number} taskId
     * @param {TaskCreate} taskCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskApiTasksTaskIdPut: async (
      taskId: number,
      taskCreate: TaskCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'taskId' is not null or undefined
      assertParamExists("updateTaskApiTasksTaskIdPut", "taskId", taskId);
      // verify required parameter 'taskCreate' is not null or undefined
      assertParamExists(
        "updateTaskApiTasksTaskIdPut",
        "taskCreate",
        taskCreate,
      );
      const localVarPath = `/api/tasks/{task_id}`.replace(
        `{${"task_id"}}`,
        encodeURIComponent(String(taskId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        "OAuth2PasswordBearer",
        [],
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        taskCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Ask Gpt
     * @param {ChatGPTRequest} chatGPTRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async askGptAskGptPost(
      chatGPTRequest: ChatGPTRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ChatGPTResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.askGptAskGptPost(
          chatGPTRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Create Company
     * @param {CompanyCreate} companyCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCompanyApiCompaniesPost(
      companyCreate: CompanyCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createCompanyApiCompaniesPost(
          companyCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Create Employee
     * @param {EmployeeBase} employeeBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEmployeeApiEmployeesPost(
      employeeBase: EmployeeBase,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createEmployeeApiEmployeesPost(
          employeeBase,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Create Task
     * @param {TaskCreate} taskCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTaskApiTasksPost(
      taskCreate: TaskCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createTaskApiTasksPost(
          taskCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserApiUsersPost(
      userCreate: UserCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createUserApiUsersPost(
          userCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Delete Task
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTaskApiTasksTaskIdDelete(
      taskId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTaskApiTasksTaskIdDelete(
          taskId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Generate Token
     * @param {any} type
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateTokenApiTokenPost(
      type: any,
      username: string,
      password: string,
      grantType?: string,
      scope?: string,
      clientId?: string,
      clientSecret?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.generateTokenApiTokenPost(
          type,
          username,
          password,
          grantType,
          scope,
          clientId,
          clientSecret,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get All Companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllCompaniesApiCompaniesNamesGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllCompaniesApiCompaniesNamesGet(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCompanyApiCompaniesMeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCompanyApiCompaniesMeGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Employees Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployeesTasksApiEmployeesTasksGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEmployeesTasksApiEmployeesTasksGet(
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Task
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTaskApiTasksTaskIdGet(
      taskId: number,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTaskApiTasksTaskIdGet(
          taskId,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTasksApiTasksGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTasksApiTasksGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserApiUsersMeGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserApiUsersMeGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Update Password
     * @param {number} userId
     * @param {ChangePassword} changePassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePasswordApiUsersUserIdPut(
      userId: number,
      changePassword: ChangePassword,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updatePasswordApiUsersUserIdPut(
          userId,
          changePassword,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Update Task
     * @param {number} taskId
     * @param {TaskCreate} taskCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTaskApiTasksTaskIdPut(
      taskId: number,
      taskCreate: TaskCreate,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateTaskApiTasksTaskIdPut(
          taskId,
          taskCreate,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Ask Gpt
     * @param {ChatGPTRequest} chatGPTRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    askGptAskGptPost(
      chatGPTRequest: ChatGPTRequest,
      options?: any,
    ): AxiosPromise<ChatGPTResponse> {
      return localVarFp
        .askGptAskGptPost(chatGPTRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create Company
     * @param {CompanyCreate} companyCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCompanyApiCompaniesPost(
      companyCreate: CompanyCreate,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .createCompanyApiCompaniesPost(companyCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create Employee
     * @param {EmployeeBase} employeeBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEmployeeApiEmployeesPost(
      employeeBase: EmployeeBase,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .createEmployeeApiEmployeesPost(employeeBase, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create Task
     * @param {TaskCreate} taskCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaskApiTasksPost(
      taskCreate: TaskCreate,
      options?: any,
    ): AxiosPromise<Task> {
      return localVarFp
        .createTaskApiTasksPost(taskCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create User
     * @param {UserCreate} userCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserApiUsersPost(
      userCreate: UserCreate,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .createUserApiUsersPost(userCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Task
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskApiTasksTaskIdDelete(
      taskId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTaskApiTasksTaskIdDelete(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Generate Token
     * @param {any} type
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateTokenApiTokenPost(
      type: any,
      username: string,
      password: string,
      grantType?: string,
      scope?: string,
      clientId?: string,
      clientSecret?: string,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .generateTokenApiTokenPost(
          type,
          username,
          password,
          grantType,
          scope,
          clientId,
          clientSecret,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get All Companies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCompaniesApiCompaniesNamesGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .getAllCompaniesApiCompaniesNamesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanyApiCompaniesMeGet(options?: any): AxiosPromise<Company> {
      return localVarFp
        .getCompanyApiCompaniesMeGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Employees Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployeesTasksApiEmployeesTasksGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .getEmployeesTasksApiEmployeesTasksGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Task
     * @param {number} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskApiTasksTaskIdGet(taskId: number, options?: any): AxiosPromise<any> {
      return localVarFp
        .getTaskApiTasksTaskIdGet(taskId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTasksApiTasksGet(options?: any): AxiosPromise<Array<Task>> {
      return localVarFp
        .getTasksApiTasksGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserApiUsersMeGet(options?: any): AxiosPromise<User> {
      return localVarFp
        .getUserApiUsersMeGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Password
     * @param {number} userId
     * @param {ChangePassword} changePassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordApiUsersUserIdPut(
      userId: number,
      changePassword: ChangePassword,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .updatePasswordApiUsersUserIdPut(userId, changePassword, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Task
     * @param {number} taskId
     * @param {TaskCreate} taskCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskApiTasksTaskIdPut(
      taskId: number,
      taskCreate: TaskCreate,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .updateTaskApiTasksTaskIdPut(taskId, taskCreate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Ask Gpt
   * @param {ChatGPTRequest} chatGPTRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public askGptAskGptPost(
    chatGPTRequest: ChatGPTRequest,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .askGptAskGptPost(chatGPTRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create Company
   * @param {CompanyCreate} companyCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createCompanyApiCompaniesPost(
    companyCreate: CompanyCreate,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .createCompanyApiCompaniesPost(companyCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create Employee
   * @param {EmployeeBase} employeeBase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createEmployeeApiEmployeesPost(
    employeeBase: EmployeeBase,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .createEmployeeApiEmployeesPost(employeeBase, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create Task
   * @param {TaskCreate} taskCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createTaskApiTasksPost(
    taskCreate: TaskCreate,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .createTaskApiTasksPost(taskCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create User
   * @param {UserCreate} userCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createUserApiUsersPost(
    userCreate: UserCreate,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .createUserApiUsersPost(userCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Task
   * @param {number} taskId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTaskApiTasksTaskIdDelete(
    taskId: number,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .deleteTaskApiTasksTaskIdDelete(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Generate Token
   * @param {any} type
   * @param {string} username
   * @param {string} password
   * @param {string} [grantType]
   * @param {string} [scope]
   * @param {string} [clientId]
   * @param {string} [clientSecret]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public generateTokenApiTokenPost(
    type: any,
    username: string,
    password: string,
    grantType?: string,
    scope?: string,
    clientId?: string,
    clientSecret?: string,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .generateTokenApiTokenPost(
        type,
        username,
        password,
        grantType,
        scope,
        clientId,
        clientSecret,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get All Companies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getAllCompaniesApiCompaniesNamesGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getAllCompaniesApiCompaniesNamesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Company
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCompanyApiCompaniesMeGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getCompanyApiCompaniesMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Employees Tasks
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getEmployeesTasksApiEmployeesTasksGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getEmployeesTasksApiEmployeesTasksGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Task
   * @param {number} taskId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTaskApiTasksTaskIdGet(
    taskId: number,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .getTaskApiTasksTaskIdGet(taskId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Tasks
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTasksApiTasksGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getTasksApiTasksGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUserApiUsersMeGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getUserApiUsersMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Password
   * @param {number} userId
   * @param {ChangePassword} changePassword
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updatePasswordApiUsersUserIdPut(
    userId: number,
    changePassword: ChangePassword,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .updatePasswordApiUsersUserIdPut(userId, changePassword, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Task
   * @param {number} taskId
   * @param {TaskCreate} taskCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateTaskApiTasksTaskIdPut(
    taskId: number,
    taskCreate: TaskCreate,
    options?: AxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .updateTaskApiTasksTaskIdPut(taskId, taskCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
